{"version":3,"sources":["index.tsx"],"names":["React","DeviceEventEmitter","findNodeHandle","NativeModules","Platform","requireNativeComponent","RNPdfScanner","ScannerManager","RNPdfScannerManager","PdfScanner","_scannerRef","_scannerHandle","_setReference","ref","event","props","onPictureTaken","nativeEvent","onRectangleDetect","quality","OS","onProcessing","addListener","prevProps","removeListener","capture","sendOnPictureTakenEvent","bind","sendOnRectangleDetectEvent","useFrontCam","brightness","saturation","contrast","getImageQuality","detectionCountBeforeCapture","durationBetweenCaptures","detectionRefreshRateInMS","Component"],"mappings":"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","sourcesContent":["import React from 'react'\nimport {\n  DeviceEventEmitter,\n  findNodeHandle,\n  NativeModules,\n  Platform,\n  requireNativeComponent,\n  ViewStyle } from 'react-native'\n\nconst RNPdfScanner = requireNativeComponent('RNPdfScanner')\nconst ScannerManager: any = NativeModules.RNPdfScannerManager\n\nexport interface PictureTaken {\n  rectangleCoordinates?: object;\n  croppedImage: string;\n  initialImage: string;\n  width: number;\n  height: number;\n}\n\n/**\n * TODO: Change to something like this\ninterface PictureTaken {\n  uri: string;\n  base64?: string;\n  width?: number; // modify to get it\n  height?: number; // modify to get it\n  rectangleCoordinates?: object;\n  initial: {\n    uri: string;\n    base64?: string;\n    width: number; // modify to get it\n    height: number; // modify to get it\n  };\n}\n */\n\ninterface PdfScannerProps {\n  onPictureTaken?: (event: any) => void;\n  onRectangleDetect?: (event: any) => void;\n  onProcessing?: () => void;\n  quality?: number;\n  overlayColor?: number | string;\n  enableTorch?: boolean;\n  useFrontCam?: boolean;\n  saturation?: number;\n  brightness?: number;\n  contrast?: number;\n  detectionCountBeforeCapture?: number;\n  durationBetweenCaptures?: number;\n  detectionRefreshRateInMS?: number;\n  documentAnimation?: boolean;\n  noGrayScale?: boolean;\n  manualOnly?: boolean;\n  style?: ViewStyle;\n  useBase64?: boolean;\n  saveInAppDocument?: boolean;\n  captureMultiple?: boolean;\n}\n\nclass PdfScanner extends React.Component<PdfScannerProps> {\n  sendOnPictureTakenEvent (event: any) {\n    if (!this.props.onPictureTaken) return null\n    return this.props.onPictureTaken(event.nativeEvent)\n  }\n\n  sendOnRectangleDetectEvent (event: any) {\n    if (!this.props.onRectangleDetect) return null\n    return this.props.onRectangleDetect(event.nativeEvent)\n  }\n\n  getImageQuality () {\n    if (!this.props.quality) return 0.8\n    if (this.props.quality > 1) return 1\n    if (this.props.quality < 0.1) return 0.1\n    return this.props.quality\n  }\n\n  componentDidMount () {\n    if (Platform.OS === 'android') {\n      const { onPictureTaken, onProcessing } = this.props\n      if (onPictureTaken) DeviceEventEmitter.addListener('onPictureTaken', onPictureTaken)\n      if (onProcessing) DeviceEventEmitter.addListener('onProcessingChange', onProcessing)\n    }\n  }\n\n  componentDidUpdate(prevProps: PdfScannerProps) {\n    if (Platform.OS === 'android') {\n      if (this.props.onPictureTaken !== prevProps.onPictureTaken) {\n        if (prevProps.onPictureTaken)\n          DeviceEventEmitter.removeListener('onPictureTaken', prevProps.onPictureTaken)\n        if (this.props.onPictureTaken)\n          DeviceEventEmitter.addListener('onPictureTaken', this.props.onPictureTaken)\n      }\n      if (this.props.onProcessing !== prevProps.onProcessing) {\n        if (prevProps.onProcessing)\n          DeviceEventEmitter.removeListener('onProcessingChange', prevProps.onProcessing)\n        if (this.props.onProcessing)\n          DeviceEventEmitter.addListener('onProcessingChange', this.props.onProcessing)\n      }\n    }\n  }\n\n  componentWillUnmount () {\n    if (Platform.OS === 'android') {\n      const { onPictureTaken, onProcessing } = this.props\n      if (onPictureTaken) DeviceEventEmitter.removeListener('onPictureTaken', onPictureTaken)\n      if (onProcessing) DeviceEventEmitter.removeListener('onProcessingChange', onProcessing)\n    }\n  }\n\n  capture () {\n    if (this._scannerHandle) {\n      ScannerManager.capture(this._scannerHandle)\n    }\n  }\n\n  _scannerRef: any = null;\n  _scannerHandle: number | null = null;\n  _setReference = (ref: any) => {\n    if (ref) {\n      this._scannerRef = ref\n      this._scannerHandle = findNodeHandle(ref)\n    } else {\n      this._scannerRef = null\n      this._scannerHandle = null\n    }\n  };\n\n  render () {\n    return (\n      <RNPdfScanner\n        ref={this._setReference}\n        {...this.props}\n        onPictureTaken={this.sendOnPictureTakenEvent.bind(this)}\n        onRectangleDetect={this.sendOnRectangleDetectEvent.bind(this)}\n        useFrontCam={this.props.useFrontCam || false}\n        brightness={this.props.brightness || 0}\n        saturation={this.props.saturation || 1}\n        contrast={this.props.contrast || 1}\n        quality={this.getImageQuality()}\n        detectionCountBeforeCapture={this.props.detectionCountBeforeCapture || 5}\n        durationBetweenCaptures={this.props.durationBetweenCaptures || 0}\n        detectionRefreshRateInMS={this.props.detectionRefreshRateInMS || 50}\n      />\n    )\n  }\n}\n\nexport default PdfScanner\n"]}